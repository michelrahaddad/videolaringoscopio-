plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.bsafe.videolaryngoscope'
    compileSdk 34

    defaultConfig {
        applicationId "com.bsafe.videolaryngoscope"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Configura√ß√£o de ABI filters para garantir compatibilidade
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            // Habilita debug de JNI para troubleshooting
            jniDebuggable true
        }
    }

    compileOptions {
        // Mantendo Java 17 como voc√™ tinha originalmente
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding true
    }

    // CR√çTICO: Configura√ß√£o para bibliotecas nativas
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    // Configura√ß√£o robusta para empacotamento
    packagingOptions {
        // Para bibliotecas nativas principais
        pickFirst 'lib/arm64-v8a/libffmpeg.so'
        pickFirst 'lib/arm64-v8a/libGPCam.so'
        pickFirst 'lib/armeabi-v7a/libffmpeg.so'
        pickFirst 'lib/armeabi-v7a/libGPCam.so'
        pickFirst 'lib/x86/libffmpeg.so'
        pickFirst 'lib/x86/libGPCam.so'
        pickFirst 'lib/x86_64/libffmpeg.so'
        pickFirst 'lib/x86_64/libGPCam.so'

        // Para armeabi (dispositivos antigos)
        pickFirst 'lib/armeabi/libffmpeg.so'
        pickFirst 'lib/armeabi/libGPCam.so'

        // Para bibliotecas C++ compartilhadas (se necess√°rio)
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'

        // Importante: n√£o remove s√≠mbolos das bibliotecas nativas
        doNotStrip '*/armeabi-v7a/*.so'
        doNotStrip '*/arm64-v8a/*.so'
        doNotStrip '*/x86/*.so'
        doNotStrip '*/x86_64/*.so'
        doNotStrip '*/armeabi/*.so'

        // Exclui arquivos META-INF desnecess√°rios
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/*.kotlin_module'
    }

    // Configura√ß√µes de lint para evitar falsos positivos
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        // Ignora avisos sobre bibliotecas nativas missing em algumas ABIs
        disable 'MissingNativeLoadLibrary'
        disable 'UnsafeNativeCodeLocation'
    }
}

dependencies {
    // AndroidX Core
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.cardview:cardview:1.0.0'

    // Lifecycle
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.7.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.7.0"

    // Activity e Fragment
    implementation 'androidx.activity:activity-ktx:1.8.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'

    // Preference (para settings)
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // Testes
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// VERS√ÉO SIMPLIFICADA: Task compat√≠vel com configuration cache
tasks.register('verifyNativeLibs') {
    description = 'Verifica se as bibliotecas nativas est√£o presentes'

    doLast {
        def libsPath = new File(projectDir, 'src/main/jniLibs')

        if (!libsPath.exists()) {
            logger.error("‚ùå ERRO: Diret√≥rio jniLibs n√£o encontrado em: ${libsPath.absolutePath}")
            return
        }

        def requiredLibs = ['libffmpeg.so', 'libGPCam.so']
        def requiredAbis = ['armeabi-v7a', 'arm64-v8a']
        def foundIssues = false

        logger.lifecycle("========================================")
        logger.lifecycle("Verifica√ß√£o de Bibliotecas Nativas")
        logger.lifecycle("========================================")

        requiredAbis.each { abi ->
            def abiPath = new File(libsPath, abi)
            logger.lifecycle("\nüìÅ Verificando ABI: $abi")

            if (!abiPath.exists()) {
                logger.error("   ‚ùå Diret√≥rio n√£o encontrado")
                foundIssues = true
            } else {
                requiredLibs.each { libName ->
                    def libFile = new File(abiPath, libName)
                    if (libFile.exists()) {
                        def sizeKB = libFile.length() / 1024
                        logger.lifecycle("   ‚úÖ $libName (${sizeKB} KB)")
                    } else {
                        logger.error("   ‚ùå $libName N√ÉO ENCONTRADO!")
                        foundIssues = true
                    }
                }
            }
        }

        // Verifica ABIs opcionais
        ['x86', 'x86_64', 'armeabi'].each { abi ->
            def abiPath = new File(libsPath, abi)
            if (abiPath.exists()) {
                logger.lifecycle("\nüìÅ ABI Opcional encontrada: $abi")
                abiPath.listFiles().each { file ->
                    if (file.name.endsWith('.so')) {
                        def sizeKB = file.length() / 1024
                        logger.lifecycle("   ‚ÑπÔ∏è  ${file.name} (${sizeKB} KB)")
                    }
                }
            }
        }

        logger.lifecycle("\n========================================")

        if (foundIssues) {
            logger.error("‚ö†Ô∏è  AVISO: Algumas bibliotecas est√£o faltando!")
            logger.error("   Extraia as bibliotecas do APK original do fabricante")
        } else {
            logger.lifecycle("‚úÖ Todas as bibliotecas essenciais foram encontradas!")
        }
    }
}

// Task opcional para debug de configura√ß√£o (n√£o executa automaticamente)
tasks.register('debugProjectConfig') {
    description = 'Mostra a configura√ß√£o atual do projeto'

    doLast {
        logger.lifecycle("Configura√ß√£o do Projeto B-safe:")
        logger.lifecycle("  App ID: ${android.defaultConfig.applicationId}")
        logger.lifecycle("  Min SDK: ${android.defaultConfig.minSdk}")
        logger.lifecycle("  Target SDK: ${android.defaultConfig.targetSdk}")
        logger.lifecycle("  Version: ${android.defaultConfig.versionName} (${android.defaultConfig.versionCode})")
        logger.lifecycle("  ABIs: ${android.defaultConfig.ndk.abiFilters}")
        logger.lifecycle("  Java: ${android.compileOptions.sourceCompatibility}")
        logger.lifecycle("  Kotlin: ${android.kotlinOptions.jvmTarget}")
    }
}

// IMPORTANTE: N√£o vincula automaticamente as tasks ao build
// Para executar a verifica√ß√£o, use: ./gradlew verifyNativeLibs
// Isso evita o erro de configuration cache durante builds normais